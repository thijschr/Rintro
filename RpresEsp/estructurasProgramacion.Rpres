```{r setup, include = FALSE}
opts_chunk$set(cache = FALSE)
```

Introducción a estructuras de programación en R
========================================================
author: Thijs Christiaan van Son
date: 

Biólogos y programación
========================================================
- Construir bucles y funciones probablemente no es lo primero biólogos nuevos a R quieren  dedicar tiempo a aprender
- Estas técnicas a menudo se perciben como difícil de entender al principio
- Sin embargo, la recompensa puede ser enorme en términos de ahorro de tiempo y la posibilidad de hacer análisis más avazados
- Aquí vamos a tener una introducción breve a *bucles*, *control de flujo* y como crear*funciones*

Bucles
========================================================
type: section
Flujo de trabajo para un *bucle*

- for*i* entre 1 y 10  
    - manipulacion de datos #1   for i = 1  
    - ...                    
    - manipulación de datos #n   for i = n
- fin del bucle

Cuando se alcanza el final del bucle, el bucle comienza de nuevo con i = 2 y así sucesivamente

Bucles tipo "for": un primer ejemplo
========================================================
```{r, firstLoop, eval = TRUE}
x <- c(3, 1, 6)
for (numero in x) {     # un bucle "for"
  print(numero^2)
}
```
- En este ejemplo hacemos solamente una manipulación de datos por iteración, es decir, elevamos al cuadrado los números en el vector *x*
- Esto se hace uno por uno, primero el primer elemento del vector *x*, despúes el segundo elemento y así sucesivamente, hasta que hayamos iterado sobre todos los elementos

Un bucle "for": ejemplo más aplicado
========================================================
Este es el data frame *env* que cargamos antes. Imaginamos que queremos correlacionar profundidad con todas las otras variables y luego almacenar los resultados en un data frame y exportar a csv
```{r, load_env, eval = TRUE, echo = FALSE}
env<-read.csv("../data/envVarSomeRaw.csv",
              header = TRUE)
env
```

Un bucle "for": ejemplo más aplicado II
========================================================
**Flujo de trabajo** para esta tarea:  
- 1) Crea vectores para almacenar valores de tau y p  
- 2) Codificar el bucle "for"  
  - bucle for con cinco iteraciones
  - en cada iteración, ejecute **cor.test()**  
  - en cada iteración, extrae valores de tau y p  
  - fin del bucle  
- 3) Almacena los resultados en un data frame  
- 4) Escribe resultados a un archivo csv  
- 5) Inspecciona el archivo csv  


Un bucle "for": ejemplo más aplicado III
========================================================
```{r, secondLoop, eval = TRUE}
## Flujo de trabajo
# 1) Crea vectores para almacenar valores de tau y p
tau <- rep(NA, length(names(env)[-6]))
pval <- rep(NA, length(names(env)[-6]))
tau
pval
```

Un bucle "for": ejemplo más aplicado IV
========================================================
```{r, secondLoopIIa, eval = TRUE}
# 2) Codifíca el bucle for
for (i in seq(ncol(env[-6]))) {
  tmp.i <- env[, i]
  test.i <- cor.test(x = env$Depth,
                     y = tmp.i,
                     method = "k")
  tau[i] <- test.i$estimate
  pval[i] <- test.i$p.value
}
# 3) Almacena los resultados en undata frame
resDF <- data.frame(var = names(env)[-6], 
                    tau = tau,
                    pvalue = pval)
```

Un bucle "for": ejemplo más aplicado V
========================================================
```{r, secondLoopIII, eval = TRUE}
# 4) Escribe resultados a un archivo csv
write.csv(resDF,
          file = "../data/corrResults.csv",
          row.names = FALSE)
resDF     # Mostrando resultados
```
5) Inspecciona el archivo csv

Ejercicio: Bucles
========================================================
type: alert
- Usando un bucle for, haz figuras que muestra todas las correlaciones
entre la profundidad y las otras variables en el data frame *env*
- Escribe todas las figuras a un archivo de pdf
- En la siguiente diapositiva el flujo de trabajo general para cada figura de correlacións
se muestra, pónlo en un bucle y haz los cambios necesarios para iterar sobre todas las correlaciones
- Tienes que usar **par(mfrow = c(3, 2))** para especificar el número de filas y columnas que quieres en la figura compuesta. pónlo antes de la llamada a la función **plot()**

Ejercicio: Bucles II
========================================================
type: alert
```{r, secondLoopIV, eval = FALSE}
pdf(file = "../data/loopExample.pdf",
    height = 5, width = 5)
plot(x = env$Depth, y = env$TN,
     main = "Correlación con TN",
     xlab = "Depth",
     ylab = "TN",
     type = "n")
points(x = env$Depth, y = env$TN,
       pch = 21,
       col = "black", bg = "red")
dev.off()
```

Ejercicio: Bucles III
========================================================
type: alert

**Hint** - Identifica los argumentos que necesitan ser cambiados 
(i.e., hecho genérico)

```{r, secondLoopV, eval = FALSE, echo = FALSE}
pdf(file = "../data/multipleCorrPlot.pdf",
    height = 9, width = 6)

par(mfrow = c(3, 2))

for (i in seq(ncol(env[-6]))) {
  env.i <- env[, i]
  plot(x = env$Depth, y = env.i,
     main = paste("Correlation with", 
                  names(env)[i], sep = " "),
     xlab = "Depth",
     ylab = names(env)[i],
     type = "n")
  points(x = env$Depth, y = env.i,
       pch = 21,
       col = "black", bg = "red")
}

dev.off()
```

Alguna pregunta?
========================================================
type: prompt

Acerca de los bucles


Control de flujo (if-else)
========================================================
type: section
Control de flujo es útil cuando la forma en que deseas continuar en tu análisis depende de una condición

Esto es típicamente controlado con declaraciones if-else

La declaración if-else funciona de la siguiente manera:  
**if (cond) expresión1 else expresión2**  


Un ejemplo simple de if-else
========================================================
```{r, ifElseSimpleIa, eval = TRUE}
a = 3

y <- if(a == 3) 
  { a } else  # else en misma línea que }
    { a + 1 }
y
```
**OJO!** La declaración **else** statement necesita estar en la misma línea que
el cierre de **{** de la primera expresión

Un ejemplo simple de if-else II
========================================================

```{r, ifElseSimpleIb, eval = TRUE}
a = 1    # Otro valor del objeto a

y <- if(a == 3) 
  { a } else  
    { a + 1 }
y
```

Otro ejemplo if-else
========================================================
```{r, ifElseExample2a, eval = FALSE}
# Calcula el promedio del los variables del df env
avg <- apply(env, MARGIN = 2, mean)

# Declaración if-else adentro de un bucle
# Si el valor está por encima de cierto 
# umbral/nivel, imprime el valor, si no, 
# imprime otra cosa
for (i in seq(length(avg))) 
{
  avg.i <- avg[i]
  if(avg.i >= 5) {
    print(avg.i) } else {
      print("Mean value too low")
    }
}
```

Salida del ejemplo anterior
========================================================
```{r, ifElseExample2b, eval = TRUE, echo = FALSE}
# Calculación del promedio de las variables del df env
avg <- apply(env, MARGIN = 2, mean)

for (i in seq(length(avg))) 
{
  avg.i <- avg[i]
  if(avg.i >= 5) {
    print(avg.i) } else {
      print("Mean value too low")
    }
}

# Los valores de promedio del df env
avg
```
El cuadro inferior muestra la salida de los valores promedios almacenados en el objeto *avg*

La función ifelse()
========================================================
- Acepta tres argumentos
  - el primer argumento es la condición
  - el segundo argumento es el tratamiento si la condición es TRUE (cierto/verdadera)
  - el tercer argumento es el tratamiento si la condición es FALSE (falsa)
- La función **ifelse()** acepta vectores como argumentos
  - Eso es útil ya que podemos evitar construir bucles (como en los ejemplos anteriores)

Ejemplo con la función ifelse()
========================================================
```{r, ifElseFunction, eval = TRUE}
k <- 1:10
k
ifelse(k < 3 | k > 8, k, 0)
```
- Aquí tenemos una condición compuesta:
  - "if" k es menor que 3 o k es mayor que 8
  - entonces devuelve el valor original del k
  - "else" return 0

Operadores aritméticos y Boolean de R
========================================================
Operación | Descripción
--------- | -----------
x + y     | Adición
x - y     | Sustracción
x * y     | Multiplicación
x / y     | División
x ^ y     | Exponenciación
x %% y    | La aritmética modular
x %/%     | División entera
x == y    | Prueba de igualdad

**x || y** Boolean OR (scalares)  
**x | y**  Boolean OR (vectores)

***

Operation | Description
--------- | -----------
x <= y    | Prueba de menor que o igual a
x >= y    | Prueba de mayor que o igual a
x && y    | Boolean AND para scalars
x & y     | Boolean AND para vectors
!x        | Boolean negación

Ejercicio: Control de flujo
========================================================
type: alert

1. Asegúrate de entender cómo se construyen las declaraciones if-else
2. Construye unas declaraciones sencillas de if-else utilizando un scalar como entrada
3. Crea un vector que utilizarás como entrada a una llamada a la función **ifelse()**
  - Crea una declaración ifelse con una condición compuesta
4. Crea un vector, entonces codificar un bucle que incluye una declaración de if-else que itera sobre tu vector creado

Alguna pregunta?
========================================================
type: prompt

Acerca de control de flujo y declaraciones de if-else


Funciones
========================================================
type: section

- Una función es simplemente una secuencia de operaciones que pertenecen naturalmente
juntos
- Si te encuentras escribiendo la misma secuencia de código una y otra vez,
por qué no conviertes la secuencia de código en una función?
- Si quieres ver cómo se codifican funciones en R, utilice la función **page()** [por ejemplo, la page(lm)], que devolverá el código

Creación de una función simple
========================================================
Volviendo un objeto: por defecto, se devuelve el último objeto definido:
```{r, simpleFunctionIa, eval = TRUE}
# Una función sin argumentos
f <- function() {
  g <- 2
  h <- 4
}

test <- f()
test
```

Creación de una función simple II
========================================================
La función puede returnar un objeto utilizando **return()**:
```{r, simpleFunctionIb, eval = TRUE}
# Otra función sin argumentos
f2 <- function() {
  g <- 2
  h <- 4
  return(g)
}

f2()     # Ya no se devuele el último objeto
```

Funciones con argumentos
========================================================
Se crea una función que cuadra valores
```{r, functionArgs, eval = TRUE}
cuadrar <- function(x) { # Takes x as arg
  sqVal <- x^2
  return(sqVal)
}
cuadrar(3)
# Pasando un vector a la función
s <- c(NA, 4, 2, 9)
cuadrar(s)
```

Función con argumentos ...
========================================================
- El argumento ... permite añadir argumentos que se pasarán a las funciones dentro de la función
- **Sí!** Es posible llamar funciones adentro de otra función
- La posibilidad de especificar un argumento **...** mejora la flexibilidad de una función
- Vamos a ver cómo funciona esto:

Función con argumentos ... II
========================================================
```{r, functionArgsII, eval = TRUE, fig.show= FALSE}
# Haziendo una función de plot
plt <- function(x, y, ...) {
  plot(x, y, 
       type = "p",    # Un arg ... 
       pch = 21,      # Otro arg ...
       bg = "red",    # y otro arg ...
       ...)
}
```

Función con argumentos ... III
========================================================
```{r, functionArgsIII, eval = TRUE}
plt(x = env$Depth, y = env$BMD,
    main = "BMD vs. Depth")  # arg ...
```

Propias funciones en funciones *apply()
========================================================
```{r, ownFuncWithApply, eval = TRUE}
# Usando nuestra función cuadrar() en apply()
apply(env, MARGIN = 2, cuadrar)
```

Ejercicio: Funciones
========================================================
type: alert
1. Crea una función sin argumentos y con y sin una llamada al **return**
2. Crea una función que calcula el volumen de una caja dado tres argumentos a, b, c


Alguna pregunta?
========================================================
type: prompt

Acerca de funciones y estructuras de programación


