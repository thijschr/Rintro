```{r setup, include = FALSE}
opts_chunk$set(cache = FALSE)
```

Estructura de datos en R
========================================================
author: Thijs Christiaan van Son
date: 

Estructura de datos: Resúmen
========================================================
type: section

Dim | Homogéneo | Heterogéneo
--- | ----------- | -------------
1d  | Vector      | Lista
2d  | Matrice     | Data frame
nd  | Array       | 

- *Homogéneo*: El contenido debe ser del mismo tipo
- *Heterogéneo*: El contenido puede ser de diferentes tipos  

Vamos a aprender más de las estructuras de datos, menos los arrays

Vectores
========================================================
type: section

- El tipo de datos fundamental del R  
- Consiste en dos tipos básicos: *vector* y *lista*
  - Primero vamos a conocer los *vectores*, mientras *listas* van a ser introducidas al final
- **OBS!** Utilice str(), la abreviatura de structure, cuando intentas entender
la estructura de cualquier estructura de datos en R

Propiedades de los vectores
========================================================
```{r, vectorProperties, eval = FALSE}
# Los vectores tienen tres propiedades
typeof()           # Lo que es
length()           # Su longitud
attributes()       # Metadatos adicionales
names()            # Atributo más común

# Pruebas y obligar (coerce)
is.vector()                  # Prueba
is.atomic() || is.list()     # La mejor prueba
as.vector()                  # Obligar a un vector
```
**OBS!** is.vector() devuelve TRUE sólo si es un vector sin
atributos aparte de nombres

Vectores
========================================================
Pueden ser:
- lógico (cierto o falso)
- número entero  
- numéro decimal
- texto

```{r, vectorTypes, eval = TRUE}
lgc <- c(TRUE, FALSE, FALSE, TRUE)
dec <- c(1.2, 3.0, 3.9, 2.4)
# Ten en cuenta el sufijo L que distingue numéricos de números enteros
ent <- c(1L, 3L, 2L, 7L)
txt <- c("esto", "es", "texto")
```

seq()
========================================================
Una forma común de crear un vector es mediante el uso de la función **c()** (concatenar), pero **seq()** es también de uso frecuente
```{r, sequence, eval = TRUE}
seq(from = 0, to = 10, by = 2)
seq(from = 0, to = 1, length = 11)
```
**OBS!** Como veremos más adelante, seq() es útil para usar en bucles

rep()
========================================================
**rep()** también es una forma común de crear un vector
```{r, repeat, eval = TRUE}
rep(x = NA, times = 7)
rep(x = c(5, 6, 7), times = 3)
```
**OBS!** Puede ser muy útil para especificar un vector vacío de una cierta longitud
que puede ser llenado más tarde por, por ejemplo, los datos generados por los bucles

Usando NULL
========================================================
Uno puede utilizar NULL para construir vectores en bucles
```{r, NULL, eval = TRUE}
z <- NULL
for(i in seq(10)) if(i%%2 == 0) z <- c(z, i)
z
```
- %% es el operador módulo, dando recordatorios al dividir  
- **OBS!** Este es un ejemplo artificial - Cómo podríamos haber hecho este vector
de una manera más eficiente y elegante?

NA vs. NULL
========================================================
Los valores nulos se cuentan como inexistente
```{r, NULLvsNA, eval = TRUE}
u <- NULL
length(u)
v <- NA
length(v)
```

Indexación
========================================================
Las estructuras de datos en R son indexados
```{r, indexing, eval = TRUE}
dec
dec[1]
dec[2:3]
```

Indexación negativa
========================================================
```{r, negIndexing, eval = TRUE}
dec
dec[-1]
dec[-c(1, 3)]
```

Filtración
========================================================
Extracción de elementos vectoriales con condiciones satisfactorias
```{r, filter, eval = TRUE}
dec
dec[dec*dec > 4]
dec[dec == 0]
```

Filtración por vector lógico
========================================================
```{r, filterLogical, eval = TRUE}
dec
sel <- dec*dec >= 9
sel
dec[sel]
```

Prueba de igualdad entre vectores
========================================================
```{r, vectorEquality, eval = TRUE}
dec
(dec2 <- c(1.1, 3.0, 3.6, 2.7))
dec == dec2
```

Añadir o eliminar elementos
========================================================
- El tamaño de un vector se determina cuando se crea
- Para añadir o eliminar elementos, tendrás que volver a asignar el vector
```{r, adding, eval = TRUE}
x <- c(3, 6, 4, 9)
x
x <- c(x[1:3], 13, x[4])
x
```

Vectores de datos cualitativos
========================================================
```{r, factor, eval = TRUE}
x <- factor(c("a", "a", "b", "c"))
x
class(x)
levels(x)
```

Reciclaje
========================================================
**OBS!** R reciclará el vector más corto si se combina con
un vector más largo
```{r, recycling, eval = TRUE}
# R emitirá un mensaje de advertencia!
c(2, 4, 6) + c(4, 0, 5, 3, 1)
# El vector más corto se recicló como:
c(2, 4, 6, 2, 4) + c(4, 0, 5, 3, 1)
```

Más acerca de los valores de NA
========================================================
Mira este ejemplo, con datos que faltan (i.e., NA):
```{r, naHandling, eval = TRUE}
n <- c(3, 5, NA, 8, 4)
n
mean(n)
mean(n, na.rm = TRUE)
```

Nombres de elementos de vectores
========================================================
Los vectores pueden darse nombres de tres maneras:
```{r, vectornames, eval = TRUE}
x <- c(a = 1, b = 2, c = 3)
x <- c(1:3); names(x) <- c("a", "b", "c")
x <- setNames(1:3, c("a", "b", "c"))
x
unname(x)     # Eliminación de nombres
```

Ejercicio: Vectores
========================================================
type: alert
1. Crea vectores utilizando diferentes métodos tal como c(), seq(), and rep()
2. Extrae diferentes elementos de los vectores usando indexación positiva y negativa
3. Aplica algún tipo de filtraje en algunos de los vectores creados
4. Crea un vector de factores
5. Crea dos vectores de longitud desigual
  - Combínalos usando operaciones matemáticas

Alguna pregunta?
========================================================
type: prompt

Acerca de vectores

Matrices
========================================================
type: section
- Una *matriz* es un vector con dos atributos adicionales:
  - el número de filas
  - el número de columnas
- **Recuerda:** una matriz es un tipo de datos *homogéneo*
  - Qué significa eso de nuevo?

Creación de matrices
========================================================
- Podemos usar la función **matrix()** para crear una matriz a partir de zero
- Por defecto, R almacena una matriz por columnas
- Al igual que para los vectores, índices de filas y columnas en una matriz comienza con 1

Creación de una matriz usando matrix()
========================================================
```{r, creatingMatrices, eval = TRUE}
y<-matrix(c(1, 4, 7, 10), nrow = 2, ncol = 2)
y
as.vector(y)  # El vector de entrada
```
- Qué pasó aquí? 
- En este caso, es necesario especificar los argumentos nrow y ncol?


Llenado matrices por filas
========================================================
```{r, matricesByRow, eval = TRUE}
z<-matrix(c(1, 4, 7, 10), nrow=2, byrow=T)
z
y        # Compare con por columnas
```

Creación de una matriz "vacía"
========================================================
```{r, emptyMatrix, eval = TRUE}
e <- matrix(data = NA, ncol = 3, nrow = 3,
            dimnames=list(c("a", "b", "c"), 
                          c("x", "y", "z")
                          )
            )
e
```
- Esto es útil porque se puede rellenar la matriz con datos más adelante
- ***OBS!*** Ver la indentación automática de los brackets


Indexación de matrices
========================================================
```{r, matrixIndexing, eval = TRUE}
z
z[1, 2] # Siempre índice de filas primero
z[, 2]  # Índice vacío = todas las filas o columnas
```

Filtración de matrices
========================================================
```{r, matrixFilt, eval = TRUE}
z
z[z[, 1] == 7, ]   # OBS! z[fil, cols]
z[, z[2, ] >= 9]
```

Filtración de matrices: Ejemplo 2
========================================================
```{r, matrixFiltII, eval = TRUE}
z
(f <- z[1, ] >= 4)      # Devuelve lógico
z[, f]
```

Aplicación a funciones a filas y columnas
========================================================
La función **apply()**   
- apply(X, MARGIN, FUN)
  - X: la matriz
  - MARGIN: la dimensión
  - FUN: la función a ser aplicado

**OBS!** Existen varias funciones *apply() 

Un ejemplo de apply()
========================================================
```{r, matrixApply, eval = TRUE}
z
apply(X = z, MAR = 1, sum)
apply(X = z, MAR = 2, function(x) sum(x > 5))
```

Añadir y eliminar filas y columnas
========================================================
- Matrices tienen dimensiones fijas
  - Por lo tanto, no podemos añadir o eliminar filas o columnas
- La solución: *reacondicionar* la matriz
  - Proporciona el mismo efecto que si hubiéramos añadido o eliminado
   filas y/o columnas

Una matriz es sólo un vector, pero ...
========================================================
```{r, matrixIsVectBut, eval = TRUE}
(x <- c(1, 4, 7, 10))
z
```

Una matriz es sólo un vector, pero ... II
========================================================
Vector *x* y matriz *z* tienen la misma longitud:
```{r, matrixIsVectButII, eval = TRUE}
length(x)     # Longitud de vector x
length(z)     # Longitud de matriz z
```

Una matriz es sólo un vector, pero ... III
========================================================
... Son diferentes:
```{r, matrixIsVectButIII, eval = TRUE}
str(x)      # Clase de vector
str(z)      # Clase de matriz
```

Nombres de filas y columnas
========================================================
- La forma natural para referirse a las filas y columnas en una matriz es mediante el uso del número de fila y de columna
- Las funciones **colnames()** y **rownames()** proporciona medidas para nombrar columnas y filas
- Es especialmente útil dar los nombres de las columnas y de las filas cuando se quiere inspeccionar y/o recordar el contenido de una matriz

Nombres de filas y columnas II
========================================================
```{r, rowColNamesMatrix, eval = TRUE}
colnames(z) <- c("speciesA", "speciesB")
rownames(z) <- c("1", "2")
z
str(z)   # El atributo de dimnames añadido
```

c() y cbind()
========================================================
```{r, cCbindRbind, eval = TRUE}
x <- 1:3; y <- 4:6
(v <- c(x, y))
str(v); is.matrix(v)
```

c() y cbind() II
========================================================
```{r, cCbindRbindII, eval = TRUE}
(w <- cbind(x, y))
str(w); is.matrix(w)
```

Ejercicio: Matrices
========================================================
type: alert
1. Crea matrices de diferentes dimensiones usando **matrix()**, **cbind()**, and **rbind()**
2. Cuál es la forma predeterminada de almacenamiento de datos en una matriz usando **matriz()**? Por filas o por columnas?
3. Asegúrate de que eres capaz de almacenar los datos en una matriz por filas y por columnas
4. Desde tus matrices creadas, extrae columnas, filas y valores individuales
5. Filtra tus matrices mediante la aplicación de una condición

Alguna pregunta?
========================================================
type: prompt
Acerca de matrices

Data frame
========================================================
type: section
- Data frames son muy comunes en R  
- Similar a matrices, pero son *heterogéneos*  
- Técnicamente también son listas, en el que cada componente son vectores de longitud igual   
 

Creación de data frames
========================================================
```{r, createDF, eval = TRUE}
spA <- c(0, 0, 0, 1, 0, 1, 1)
spB <- c(0, 1, 1, 0, 0, 0, 0)
spC <- c(1, 0, 0, 0, 1, 0, 0)
obs <- data.frame(speciesA = spA,
                  speciesB = spB,
                  speciesC = spC)
obs
```

Entrada de datos tabulares
========================================================
Recomiendo usar archivos **.csv**  
```{r, readCsv, eval = TRUE}
env<-read.csv("../data/envVarSomeRaw.csv",
              header = TRUE)
env      # Esto es un data frame
```

Salida de datos tabulares
========================================================
Escribir datos tabulares a un archivo **.csv**
```{r, writeCsv, eval = TRUE}
write.csv(x = obs, 
          file = "../data/speciesObs.csv",
          row.names = FALSE)
```
- *x*: el objeto a ser escrito
  - Aquí es el objeto *obs* que acabamos de crear
- *file*: el archivo a lo cual quieres que los datos se escriben 
  - Uso de rutas relativas a nuestro directorio base del proyecto
- Puede ser sabio excluir los nombres de filas

Inspección de data frames
========================================================
```{r, strDF, eval = TRUE}
str(env[c(1:5), ])
```
- **OBS!** Por razones de brevedad sólo estoy mostrando los primeros cinco observaciones
- Utilice siempre la función **str()** para asegurarte de que tus datos están en el formato deseado

Inspección de data frames II
========================================================
```{r, headDF, eval = TRUE}
head(env, 3)  # Las tres primeras observaciones
tail(env, 3)  # Las tres últimas observaciones
```

Adición de una columna
========================================================
```{r, addColDF, eval = TRUE}
# Adición de una columna
env$X <- with(env, TOC / TN)
env
```

La eliminación de una columna
========================================================
```{r, remColDF, eval = TRUE}
env <- env[, -7]   
env
```

Acceso a data frames
========================================================
```{r, acessDFsubScripts, eval = TRUE}
# Extracción por índices
env[1:5, 6]
# Extracción por nombre de columna
names(env)    # Función útil
env[1:5, ]$Depth
```

Filtración
========================================================
```{r, filteringDF, eval = TRUE}
# Extracción de observaciones de más profundo que 60m
env[env$Depth >= 60, ]
```
Extrae todas las observaciones (= filas) que cumplan con el criterio de filtrado

Filtración II
========================================================
```{r, filteringDFII, eval = TRUE}
# Dos criterias de filtración
env[env$Depth <= 70 & env$BMD >= 1, ]
```
Extrae todas las observaciones (= filas) que cumplan con los criteros de profundidad y BMD

Evitar la reducción de dimensiones
========================================================
```{r, dimRedDF, eval = TRUE}
# La extracción de un subconjunto unidimensional devuelve un vector
env[1:5, ]$TN
str(env[1:5, ]$TN)
is.vector(env[1:5, ]$TN)
```

Evitar la reducción de dimensiones II
========================================================
```{r, dimRedDFII, eval = TRUE}
# Aplique el argumento drop = FALSE para evitar la reducción de dimensión
env[1:5, 1, drop = FALSE]
is.data.frame(env[1:5, 1, drop = FALSE])
```

Ejercicio: Data frames
========================================================
type: alert
1. Crea un par de vectores y combínalos en un data frame usando la función **data.frame()**
2. Cargue el archivo envVarAllZST.csv en el directorio de datos
  - Inspecciona la estructura del data frame
  - Ten acceso a subconjuntos de los datos por los subíndices y por nombre de columna
  - Haz algun tipo de filtración en el data frame
  - Escribe los datos filtrados a un archivo .csv, usando la función **write.csv()**
  - Abre el archivo .csv creado en un editor de texto
3. Realiza pruebas de correlación utilizando la función **cor.test()** 

Alguna pregunta?
========================================================
type: prompt
Acerca de data frames

Listas
========================================================
type: section
- Al igual que los data frames, listas son **heterogéneos**
- Como dijimos al hablar de vectores, técnicamente, las listas son vectores
- Como veremos más adelante, la salida de funciones a menudo se resume en listas

Creación de listas
========================================================
```{r, createList, eval = TRUE}
L <- list(nom = c("Kim", "Oda", "Ola"),
          edad = c(19, 23, 25),
          nacional = c("S", "DK", "N"))
L
```

Etiquetas de listas son opcionales
========================================================
```{r, createListII, eval = TRUE}
# Una lista sin etiquetas
L2 <- list(c("Kim", "Oda", "Ola"),
           c(19, 23, 25),
           c("S", "DK", "N"))
L2
``` 

Estructura de listas
========================================================
```{r, strList, eval = TRUE}
str(L)
str(L2)
``` 

Acceso a componentes de listas
========================================================
```{r, listAccess, eval = TRUE}
# Tres maneras de acceder a componentes individuales de una lista
L$edad
L[["edad"]]
L[[1]]
``` 

Acceso a valores de listas
========================================================
```{r, listAccessII, eval = TRUE}
# Tres maneras de acceder valores de listas
L$edad[1]
L[["edad"]][1:2]
L[[1]][c(1, 3)]
``` 

Salida de un modelo es una lista
========================================================
```{r, envModelling, eval = TRUE}
# Ajuste de un modelo lineal
mod <- lm(Mud ~ Depth, data = env)

# Es el objeto mod una lista?
is.list(mod)
# str(mod)    # No mostrado
``` 

Salida de un modelo es una lista II
========================================================
```{r, envModellingII, eval = TRUE}
names(mod)
mod$coefficients   # Acceso a resultados
``` 

Funciones lapply() y sapply()
========================================================
```{r, applyOnLists, eval = TRUE}
# Creación de una nueva lista
L3 <- list(c(4:6),
           c(13:17))
L3
``` 

Funciones lapply() y sapply() II
========================================================
```{r, lapply, eval = TRUE}
# lapply() en una lista
lapply(L3, sum)
# sapply() devuelve un vector
# Que a veces puede ser más deseable
sapply(L3, sum)
``` 

Ejercicio: Listas
========================================================
type: alert
1. Crea una lista, con etiquetas, que tiene cuatro componentes, uno para cada uno de los principales tipos de datos: un vector, una matriz, un data frames y una lista
2. Observe la estructura de la lista
3. Accede componentes y valores de la lista
4. Especifica y ejecuta un modelo linear utilizando datos del archivo envVarAllZST.csv que importaste anteriormente
  - Extrae e inspecciona los coeficientes, residuales y valores ajustados
  - Haz una figura de los residuales vs los valores ajustados

Alguna pregunta?
========================================================
type: prompt

Acerca de listas o estructuras de datos en general?
