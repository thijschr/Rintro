```{r setup, include = FALSE}
opts_chunk$set(cache = FALSE)
```

Intro to programming Structures in R
========================================================
author: Thijs Christiaan van Son
date: 

Ecologists and programming
========================================================
- Constructing loops and functions may not be the first things ecologists new to R
would spend time learning
- These techniques are often perceived as difficult to grasp in the beginning
- However, the reward can be huge in terms of time saved and the possibility to do
more advanced analyses

Loops
========================================================
type: section
Workflow of a for loop

- for*i* is from 1 to 10  
    - data manipulation #1  
    - data manupulation #2
    - ...
    - data manipulation #n
- end of loop

For loops: a first example
========================================================
```{r, firstLoop, eval = TRUE}
x <- c(3, 1, 6, 4)
for (number in x) {     # a for loop
  print(number^2)
}
```
- In this example we only do one data manipulation per iteration, namely, we square the numbers in vector *x*
- This is done one-by-one, first the first component of vector *x*, then the second component and so on, until we have iterated over all components

For loops: a more applied example
========================================================
This is the *env* data frame we loaded earlier. Imagine we want to correlate Depth
with all the other variables and then store the results in a data frame and export to csv
```{r, load_env, eval = TRUE, echo = FALSE}
env<-read.csv("../data/envVarSomeRaw.csv",
              header = TRUE)
env
```

For loops: a more applied example II
========================================================
**Workflow** for this task:  
- 1) Create vectors to store tau and p-values  
- 2) Code the for loop  
  - for loop with five iterations
  - in each iteration, run **cor.test()**  
  - in each iteration, extract tau and p-values  
  - end of loop  
- 3) Store the results in a data frame  
- 4) Write results to a csv file  
- 5) Inspect the csv file  


For loops: a more applied example III
========================================================
```{r, secondLoop, eval = TRUE}
## Workflow
# 1) Create vectors to store tau and p-values
tau <- rep(NA, length(names(env)[-6]))
pval <- rep(NA, length(names(env)[-6]))
tau; pval
```

For loops: a more applied example IV
========================================================
```{r, secondLoopIIa, eval = TRUE}
# 2) Code the for loop
for (i in seq(ncol(env[-6]))) {
  tmp.i <- env[, i]
  test.i <- cor.test(x = env$Depth,
                     y = tmp.i,
                     method = "k")
  tau[i] <- test.i$estimate
  pval[i] <- test.i$p.value
}
# 3) Store the results in a data frame
resultsDF <- data.frame(var = names(env)[-6], 
                        tau = tau,
                        pvalue = pval)
```

For loops: a more applied example V
========================================================
```{r, secondLoopIII, eval = TRUE}
# 4) Write results to a csv file
write.csv(resultsDF,
          file = "../data/correlationResults.csv",
          row.names = FALSE)
resultsDF     # Displaying results
```
We can now inspect the resulting csv file

Exercises: Loops
========================================================
type: alert
- Using a for loop, make one plot showing all the correlations 
between Depth and the other variables in the *env* data frame
- Write the plots to one pdf file
- On the next slide the general workflow for each correlation plot
is shown, put it in a for loop and make the changes necessary to 
iterate over all correlations
- You must use **par(mfrow = c(3, 2))** to specify how many columns and 
rows you want in the compound plot - put it before the call to the 
**plot()** function

Exercises: Loops II
========================================================
type: alert
```{r, secondLoopIV, eval = FALSE}
pdf(file = "../data/loopExample.pdf",
    height = 5, width = 5)
plot(x = env$Depth, y = env$TN,
     main = "Correlation with TN",
     xlab = "Depth",
     ylab = "TN",
     type = "n")
points(x = env$Depth, y = env$TN,
       pch = 21,
       col = "black", bg = "red")
dev.off()
```

Exercises: Loops III
========================================================
type: alert

**Hint** - Identify the arguments that needs to be changed 
(i.e., made generic)

```{r, secondLoopV, eval = FALSE, echo = FALSE}
pdf(file = "../data/multipleCorrPlot.pdf",
    height = 9, width = 6)

par(mfrow = c(3, 2))

for (i in seq(ncol(env[-6]))) {
  env.i <- env[, i]
  plot(x = env$Depth, y = env.i,
     main = paste("Correlation with", 
                  names(env)[i], sep = " "),
     xlab = "Depth",
     ylab = names(env)[i],
     type = "n")
  points(x = env$Depth, y = env.i,
       pch = 21,
       col = "black", bg = "red")
}

dev.off()
```

Any questions?
========================================================
type: prompt

Regarding loops


Flow control (if-else)
========================================================
type: section
Flow control is handy when how you want to proceed in your analysis 
is dependent on a condition

This is typically controlled by if-else statements

The if-else statement works as follows:  
**if (cond) expression1 else expression2**  


A simple if-else example
========================================================
```{r, ifElseSimpleIa, eval = TRUE}
a = 3

y <- if(a == 3) 
  { a } else  # else on same line as the }
    { a + 1 }
y
```
**OBS!** The **else** statement needs to be on the same line as 
the closing **{** of the first expression

A simple if-else example II
========================================================

```{r, ifElseSimpleIb, eval = TRUE}
a = 1    # Changing the value of a

y <- if(a == 3) 
  { a } else  
    { a + 1 }
y
```

Another if-else example
========================================================
```{r, ifElseExample2a, eval = FALSE}
# Calculating the mean of variables in env df
avg <- apply(env, MARGIN = 2, mean)

# if-else statement within a loop
# If the value is above some threshold, print
# the value, if not print something else
for (i in seq(length(avg))) 
{
  avg.i <- avg[i]
  if(avg.i >= 5) {
    print(avg.i) } else {
      print("Mean value too low")
    }
}
```

Output of Another if-else example
========================================================
```{r, ifElseExample2b, eval = TRUE, echo = FALSE}
# Calculating the mean of variables in env df
avg <- apply(env, MARGIN = 2, mean)

# if-else statement within a loop
# If the value is above some threshold, print
# the value, if not print something else
for (i in seq(length(avg))) 
{
  avg.i <- avg[i]
  if(avg.i >= 5) {
    print(avg.i) } else {
      print("Mean value too low")
    }
}

# The average values of env df
avg
```

Arithmetic and Boolean R operators
========================================================
Operation | Description
--------- | -----------
x + y     | Addition
x - y     | Subtraction
x * y     | Multiplication
x / y     | Division
x ^ y     | Exponentiation
x %% y    | Modular arithmetic
x %/%     | Integer division
x == y    | Test for equality

**x || y** Boolean OR (scalars)  
**x | y** Boolean OR (vectors)

***

Operation | Description
--------- | -----------
x <= y    | Test for less than or equal to
x >= y    | Test for larger than or equal to
x && y    | Boolean AND for scalars
x & y     | Boolean AND for vectors
!x        | Boolean negation

Exercise: Flow control
========================================================
type: alert

1. Make sure you understand how if-else statements are constructed
2. Construct some simple if-else statements using a single scalar as input
3. Create a vector and make a for loop that includes an if-else statement and that iterates over your created vector

Any questions?
========================================================
type: prompt

Regarding flow control and if-else statements


Functions
========================================================
type: section

