```{r setup, include = FALSE}
opts_chunk$set(cache = TRUE)
```

Data structures of R
========================================================
author: Thijs Christiaan van Son
date: 

Overview: Data structures
========================================================
type: section

Dim | Homogeneous | Heterogeneous
--- | ----------- | -------------
1d  | Atomic vector | List
2d  | Matrix      | Data frame
nd  | Array       | 

- *Homogeneous*: ...
- *Heterogeneous*: ...

Vectors
========================================================
type: section

- The fundamental data type in R  
- Consists of two basic flavours: *atomic vector* and *lists*
- **OBS!** Use str(), short for structure, when trying to understand 
the structure of any R data structure

Properties of vectors
========================================================
```{r, vectorProperties, eval = FALSE}
# Vectors have three properties
typeof()           # What it is
length()           # How long it is
attributes()       # Additional metadata
names()            # The most common attribute

# Testing and coercing
is.vector()                  # Testing
is.atomic() || is.list()     # Best test
as.vector()                  # Coercing into a vector
```
**OBS!** is.vector() returns TRUE only if it is a vector with no
attributes apart from names

Atomic vectors
========================================================
- logical
- integer  
- numeric
- character

```{r, vectorTypes, eval = TRUE}
log <- c(TRUE, FALSE, FALSE, TRUE)
num <- c(1.2, 3.0, 3.9, 2.4)
# Note the L suffix which distinguishes numeric from integers
int <- c(1L, 3L, 2L, 7L)
char <- c("these", "are", "some", "strings")
```

seq()
========================================================
```{r, sequence, eval = TRUE}
seq(from = 0, to = 10, by = 2)
seq(from = 0, to = 1, length = 11)
```
**OBS!** seq() is handy to use in loops

rep()
========================================================
```{r, repeat, eval = TRUE}
rep(x = NA, times = 7)
rep(x = c(5, 6, 7), times = 3)
```
**OBS!** Can be handy for specifying an empty vector of a certain length
that can be filled by, for example data generated by loops, later

Using NULL
========================================================
One can use NULL to build up vectors in loops
```{r, NULL, eval = TRUE}
z <- NULL
for(i in seq(10)) if(i %%2 == 0) z <- c(z, i)
z
```
- %% is the modulo operator, giving reminders upon division  
- **OBS!** This is an artificial example

NA vs. NULL
========================================================
Null values are counted as nonexistent
```{r, NULLvsNA, eval = TRUE}
u <- NULL
length(u)
v <- NA
length(v)
```
Indexing
========================================================
Data structures in R are indexed
```{r, indexing, eval = TRUE}
num
num[1]
num[2:3]
```

Negative indexing
========================================================
```{r, negIndexing, eval = TRUE}
num
num[-1]
num[-c(1, 3)]
```

Filtering
========================================================
Extract vector elements satisfying conditions
```{r, filter, eval = TRUE}
num
num[num*num > 4]
num[num == 0]
```

Filtering by logical vector
========================================================
```{r, filterLogical, eval = TRUE}
num
sel <- num*num >= 9
sel
num[sel]
```

Test of vector equality
========================================================
```{r, vectorEquality, eval = TRUE}
num
(num2 <- c(1.1, 3.0, 3.6, 2.7))
num == num2
```

Adding or deleting elements
========================================================
- The size of a vector is determined when it is created
- To add or delete elements, you'll need to reassign the vector  
```{r, adding, eval = TRUE}
x <- c(3, 6, 4, 9)
x
x <- c(x[1:3], 13, x[4])
x
```

Factors: dealing with qual data
========================================================
```{r, factor, eval = TRUE}
x <- factor(c("a", "a", "b", "c"))
x
class(x)
levels(x)
```

Recycling
========================================================
**OBS!** R will recycle the shorter vector if combined with
a longer vector
```{r, recycling, eval = TRUE}
# Will issue a warning message!
c(2, 4, 6) + c(4, 0, 5, 3, 1)
# The shorter vector was recycled like:
c(2, 4, 6, 2, 4) + c(4, 0, 5, 3, 1)
```

Vector element names
========================================================
Vectors can be given names in three ways:
```{r, vectornames, eval = TRUE}
x <- c(a = 1, b = 2, c = 3)
x <- c(1:3); names(x) <- c("a", "b", "c")
x <- setNames(1:3, c("a", "b", "c"))
x
unname(x)          # Removal of names
```

Exercise: Atomic vectors
========================================================
type: alert
1. Create vectors using different methods such as c(), seq(), and rep()
2. Extract different elements of the vectors using indexing (also negative indexing)
3. Create a factor vector
4. Create two vectors of unequal length
  - Combine them using mathematical operations

Any questions?
========================================================
type: prompt

Matrices
========================================================
type: section

Data frames
========================================================
type: section

Lists
========================================================
type: section


